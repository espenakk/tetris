name: Build

on:
  push:
    branches: [ "master", "dev", "runedev", "toredev" ]
  pull_request:
    branches: [ "master", "dev" ]

jobs:
  vcpkg-on-linux:

    runs-on: ${{ matrix.os }}
    env:
      CC: gcc-${{ matrix.compiler_version }}
      CXX: g++-${{ matrix.compiler_version }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]

    steps:
      #      - uses: actions/checkout@v3
      - uses: lukka/get-cmake@latest
      - name: Install prerequisites
        run: |
          sudo apt-get update && sudo apt-get install -y \
          libxinerama-dev \
          libxcursor-dev \
          xorg-dev \
          libglu1-mesa-dev \
          pkg-config

      - name: Restore artifacts, or run vcpkg, build (and cache artifacts as post step)
        uses: lukka/run-vcpkg@v10
        id: runvcpkg
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: '12c2a93b4007612b5ffa980c9d2235eb0bcac10f'

      - name: Configure and build
        run: |
          cmake . -B build -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE=Release
          cmake --build build

      - name: Test
        run: |
          cd build/tests
          ctest --output-on-failure


  vcpkg-on-windows:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]

    steps:
      #      - uses: actions/checkout@v3
      - uses: lukka/get-cmake@latest
      - name: Restore artifacts, or run vcpkg, build (and cache artifacts as post step)
        uses: lukka/run-vcpkg@v10
        id: runvcpkg
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: '12c2a93b4007612b5ffa980c9d2235eb0bcac10f'

      #      - name: Configure and build
      #        run: |
      #          cmake . -B build -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE="Release"
      #          cmake --build build --config Release
      #
      #      - name: Test
      #        run: |
      #          cd build/tests
      #          ctest -C Release --output-on-failure

      - name: Run CMake consuming CMakePreset.json and run vcpkg to build packages
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-multi-vcpkg'


  vcpkg-on-darwin:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest ]

    steps:
      #      - uses: actions/checkout@v3
      - uses: lukka/get-cmake@latest
      - name: Restore artifacts, or run vcpkg, build (and cache artifacts as post step)
        uses: lukka/run-vcpkg@v10
        id: runvcpkg
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: '12c2a93b4007612b5ffa980c9d2235eb0bcac10f'

      - name: Install prerequisites
        run: |
          brew install pkg-config

      - name: Configure and build
        run: |
          cmake . -B build -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE="Release"
          cmake --build build
